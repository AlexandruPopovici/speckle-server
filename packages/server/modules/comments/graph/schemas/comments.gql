type Comment {
  id: String!
  authorId: String!
  archived: Boolean!
  text: String!
  data: JSONObject!
  resources: [String]!
  createdAt: DateTime
  updatedAt: DateTime
  replies: CommentReplyCollection
}

type CommentCollection {
  totalCount: Int!
  cursor: String
  items: [Comment]
}

type CommentReply {
  id: String!
  authorId: String!
  archived: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  text: String!
}

type CommentReplyCollection {
  totalCount: Int!
  cursor: String
  items: [CommentReply]
}

input CommentCreateInput {
  streamId: String!
  resources: [String]!
  text: String!
  data: JSONObject!
}

input CommentEditInput {
  streamId: String!
  id: String!
  text: String!
  data: JSONObject!
}

input ReplyCreateInput {
  commentId: String!
  text: String!
}

input ReplyEditInput {
  id: String!
  text: String!
  archived: Boolean
}

extend type Stream {
  comments(
    limit: Int! = 20
    archived: Boolean = false
    cursor: String
  ): CommentCollection
  comment(id: String!): Comment
}

extend type Commit {
  comments(
    limit: Int! = 20
    archived: Boolean = false
    cursor: String
  ): CommentCollection
}

extend type Object {
  comments(
    limit: Int! = 20
    archived: Boolean = false
    cursor: String
  ): CommentCollection
}

extend type Mutation {
  # Used for broadcasting real time chat head bubbles and status.
  userCommentActivityBroadcast(
    streamId: String!
    resourceId: String!
    data: JSONObject
  ): Boolean! @hasRole(role: "server:user") @hasScope(scope: "streams:read")

  commentCreate(input: CommentCreateInput!): String!
    @hasRole(role: "server:user")
    @hasScope(scope: "streams:read")

  commentEdit(streamId: String!, comment: JSONObject!): Boolean!
    @hasRole(role: "server:user")
    @hasScope(scope: "streams:read")

  commentReply(streamId: String!, commentReply: JSONObject!): String!
    @hasRole(role: "server:user")
    @hasScope(scope: "streams:read")

  commentReplyEdit(streamId: String!, commentReply: JSONObject!): Boolean!
    @hasRole(role: "server:user")
    @hasScope(scope: "streams:read")
}

extend type Subscription {
  userCommentActivity(streamId: String!, resourceId: String!): JSONObject
    @hasRole(role: "server:user")
    @hasScope(scope: "streams:read")

  commentCreated(streamId: String!, resourceId: String!): JSONObject
    @hasRole(role: "server:user")
    @hasScope(scope: "streams:read")

  commentReplyCreated(streamId: String!, commentId: String!): JSONObject
    @hasRole(role: "server:user")
    @hasScope(scope: "streams:read")
}
